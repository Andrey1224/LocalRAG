#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π LocalRAG –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö 20 –≤–æ–ø—Ä–æ—Å–∞—Ö
"""

import requests
import time
import json

API_BASE_URL = "http://localhost:8000"

# 20 —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ pattern_analysis.md 
test_questions = [
    "–µ—Å—Ç—å –ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ WhatsApp?",
    "AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", 
    "–±—É–¥–µ—Ç –ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞?",
    "WhatsApp Business API",
    "–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ª–∏ VoIP?",
    "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ Slack –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é?",
    "–µ—Å—Ç—å –ª–∏ live chat?",
    "–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 2FA",
    "ticketing system",
    "–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π",
    "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç Pro —Ç–∞—Ä–∏—Ñ?",
    "–µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥?",
    "–∫–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?",
    "—á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
    "–≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ?",
    "–ø—Ä–æ–±–ª–µ–º—ã —Å Android",
    "–æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV",
    "–Ω–µ –¥–æ—Ö–æ–¥–∏—Ç –ø–∏—Å—å–º–æ",
    "–æ—à–∏–±–∫–∞ 403",
    "–∫–∞–∫ —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å?"
]

def test_question(question: str, test_num: int) -> dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å"""
    try:
        start_time = time.time()
        response = requests.post(
            f"{API_BASE_URL}/ask",
            json={"question": question},
            timeout=30
        )
        response_time = int((time.time() - start_time) * 1000)
        
        if response.status_code == 200:
            data = response.json()
            answer = data.get("answer", "")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
            analysis = analyze_answer_quality(question, answer)
            
            return {
                "test_num": test_num,
                "question": question,
                "success": True,
                "answer": answer,
                "response_time_ms": response_time,
                "analysis": analysis
            }
        else:
            return {
                "test_num": test_num,
                "question": question, 
                "success": False,
                "error": f"HTTP {response.status_code}: {response.text}",
                "response_time_ms": response_time
            }
    except Exception as e:
        return {
            "test_num": test_num,
            "question": question,
            "success": False,
            "error": str(e),
            "response_time_ms": 0
        }

def analyze_answer_quality(question: str, answer: str) -> dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞"""
    analysis = {
        "has_duplicates": False,
        "has_relevant_content": False,
        "has_roadmap_info": False,
        "content_length": len(answer),
        "estimated_quality": "unknown"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    lines = [line.strip() for line in answer.split('\n') if line.strip()]
    unique_lines = set(lines)
    analysis["has_duplicates"] = len(lines) != len(unique_lines)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
    question_lower = question.lower()
    answer_lower = answer.lower()
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤
    if "whatsapp" in question_lower:
        analysis["has_relevant_content"] = "whatsapp" in answer_lower
        analysis["has_roadmap_info"] = "q3" in answer_lower or "–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è" in answer_lower
        
    elif "slack" in question_lower:
        analysis["has_relevant_content"] = "slack" in answer_lower
        
    elif "live chat" in question_lower:
        analysis["has_relevant_content"] = "live chat" in answer_lower
        
    elif "2fa" in question_lower or "–¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω" in question_lower:
        analysis["has_relevant_content"] = "–¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω" in answer_lower or "2fa" in answer_lower
        
    elif "—Å–≤—è–∑–∞—Ç—å—Å—è" in question_lower:
        analysis["has_relevant_content"] = "support@" in answer_lower or "email" in answer_lower
        
    elif "—Ç–∞—Ä–∏—Ñ" in question_lower:
        analysis["has_relevant_content"] = "$" in answer_lower or "—Ç–∞—Ä–∏—Ñ" in answer_lower
        
    elif "–¥–∞–Ω–Ω—ã–µ" in question_lower:
        analysis["has_relevant_content"] = "aws" in answer_lower or "–¥–∞–Ω–Ω—ã–µ" in answer_lower
        
    else:
        # –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        analysis["has_relevant_content"] = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    if analysis["has_duplicates"]:
        analysis["estimated_quality"] = "poor"
    elif analysis["has_relevant_content"]:
        analysis["estimated_quality"] = "good"
    else:
        analysis["estimated_quality"] = "fair"
        
    return analysis

def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π LocalRAG...")
    print(f"üìä –ë—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(test_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤\n")
    
    results = []
    successful_tests = 0
    total_response_time = 0
    
    for i, question in enumerate(test_questions, 1):
        print(f"üß™ –¢–µ—Å—Ç {i:2d}/20: {question[:50]}{'...' if len(question) > 50 else ''}")
        
        result = test_question(question, i)
        results.append(result)
        
        if result["success"]:
            successful_tests += 1
            total_response_time += result["response_time_ms"]
            
            # –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑
            analysis = result["analysis"]
            quality = analysis["estimated_quality"]
            quality_emoji = {"good": "‚úÖ", "fair": "‚ö†Ô∏è", "poor": "‚ùå"}
            
            print(f"   {quality_emoji.get(quality, '‚ùì')} {quality.upper()}: "
                  f"{result['response_time_ms']}ms, "
                  f"duplicates: {'Yes' if analysis['has_duplicates'] else 'No'}")
        else:
            print(f"   ‚ùå FAILED: {result['error']}")
            
        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*60}")
    print(f"üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{len(test_questions)} ({successful_tests/len(test_questions)*100:.1f}%)")
    
    if successful_tests > 0:
        avg_response_time = total_response_time / successful_tests
        print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.0f}ms")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        quality_counts = {"good": 0, "fair": 0, "poor": 0}
        duplicate_count = 0
        
        for result in results:
            if result["success"]:
                analysis = result["analysis"]
                quality_counts[analysis["estimated_quality"]] += 1
                if analysis["has_duplicates"]:
                    duplicate_count += 1
        
        print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤:")
        print(f"   ‚úÖ Good: {quality_counts['good']}")
        print(f"   ‚ö†Ô∏è  Fair: {quality_counts['fair']}")
        print(f"   ‚ùå Poor: {quality_counts['poor']}")
        print(f"üîÑ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤: {duplicate_count} —Ç–µ—Å—Ç–∞—Ö")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        original_success_rate = 6.5  # –∏–∑ 10
        current_success_rate = (quality_counts['good'] / successful_tests) * 10 if successful_tests > 0 else 0
        improvement = current_success_rate - original_success_rate
        
        print(f"\nüéØ –û–¶–ï–ù–ö–ê –£–õ–£–ß–®–ï–ù–ò–ô:")
        print(f"   –ò—Å—Ö–æ–¥–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 6.5/10")
        print(f"   –¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞: {current_success_rate:.1f}/10")
        print(f"   –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:+.1f} –±–∞–ª–ª–æ–≤")
        
        if improvement >= 1.5:
            print("   üéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! (—É–ª—É—á—à–µ–Ω–∏–µ > 1.5 –±–∞–ª–ª–æ–≤)")
        elif improvement >= 0.5:
            print("   üëç –•–æ—Ä–æ—à–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ!")
        else:
            print("   üòê –ù–µ–±–æ–ª—å—à–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("test_results_improved.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results_improved.json")

if __name__ == "__main__":
    run_tests()