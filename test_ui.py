#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π Streamlit UI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LocalRAG
"""

import streamlit as st
import requests
import json
import time
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8001"

st.set_page_config(
    page_title="LocalRAG Test UI",
    page_icon="ü§ñ",
    layout="wide"
)

def main():
    st.title("ü§ñ LocalRAG Test Interface")
    st.write("–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ LocalRAG")
    
    # –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
    st.sidebar.title("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    mode = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        ["Health Check", "File Upload", "Ingest Test", "Ask Test", "Document Management", "Feedback Test", "Full Test"]
    )
    
    if mode == "Health Check":
        test_health()
    elif mode == "File Upload":
        test_file_upload()
    elif mode == "Ingest Test":
        test_ingest()
    elif mode == "Ask Test":
        test_ask()
    elif mode == "Document Management":
        test_document_management()
    elif mode == "Feedback Test":
        test_feedback()
    elif mode == "Full Test":
        run_full_test()

def test_health():
    st.header("üîç Health Check")
    
    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API"):
        with st.spinner("–ü—Ä–æ–≤–µ—Ä—è–µ–º API..."):
            try:
                response = requests.get(f"{API_BASE_URL}/health", timeout=10)
                if response.status_code == 200:
                    st.success("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    st.json(response.json())
                else:
                    st.error(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ö–æ–¥: {response.status_code}")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

def test_file_upload():
    st.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    st.info("""
    **üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
    - **–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã**: .txt, .md (Markdown)
    - **–í–µ–±-—Ñ–æ—Ä–º–∞—Ç—ã**: .html, .htm
    - **–î–∞–Ω–Ω—ã–µ**: .json, .csv, .log
    - **–î—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã**: –ª—é–±—ã–µ —Ñ–∞–π–ª—ã —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
    
    **üìè –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
    - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50 –ú–ë
    - –§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (UTF-8)
    - PDF –∏ Word –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è (–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤ –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö)
    """)
    
    # File uploader
    uploaded_files = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
        type=['txt', 'md', 'html', 'htm', 'json', 'csv', 'log'],
        accept_multiple_files=True,
        help="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ LocalRAG"
    )
    
    if uploaded_files:
        st.write(f"üìé –í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(uploaded_files)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        for file in uploaded_files:
            with st.expander(f"üìÑ {file.name} ({file.size} –±–∞–π—Ç)"):
                col1, col2 = st.columns([2, 1])
                with col1:
                    st.write(f"**–ò–º—è:** {file.name}")
                    st.write(f"**–†–∞–∑–º–µ—Ä:** {file.size:,} –±–∞–π—Ç")
                    st.write(f"**–¢–∏–ø:** {file.type}")
                
                with col2:
                    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                    if file.size < 1000:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
                        try:
                            content = file.read().decode('utf-8')
                            file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
                            st.text_area("–ü—Ä–µ–≤—å—é", content[:200] + "..." if len(content) > 200 else content, height=100)
                        except:
                            st.write("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        if st.button("üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –≤ —Å–∏—Å—Ç–µ–º—É", type="primary"):
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            successful_uploads = []
            failed_uploads = []
            
            for i, file in enumerate(uploaded_files):
                status_text.text(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {file.name}")
                progress_bar.progress((i + 1) / len(uploaded_files))
                
                try:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ
                    temp_path = f"/tmp/{file.name}"
                    with open(temp_path, "wb") as f:
                        f.write(file.read())
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ API
                    data = {
                        "paths": [temp_path],
                        "delete_missing": False
                    }
                    response = requests.post(
                        f"{API_BASE_URL}/ingest", 
                        json=data, 
                        timeout=60
                    )
                    
                    if response.status_code == 200:
                        result = response.json()
                        successful_uploads.append({
                            "name": file.name,
                            "result": result
                        })
                    else:
                        failed_uploads.append({
                            "name": file.name,
                            "error": f"HTTP {response.status_code}: {response.text}"
                        })
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    try:
                        os.remove(temp_path)
                    except:
                        pass
                        
                except Exception as e:
                    failed_uploads.append({
                        "name": file.name,
                        "error": str(e)
                    })
            
            progress_bar.progress(1.0)
            status_text.text("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if successful_uploads:
                st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(successful_uploads)} —Ñ–∞–π–ª–æ–≤")
                with st.expander("üìä –î–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫"):
                    for upload in successful_uploads:
                        st.write(f"**{upload['name']}**: {upload['result']['indexed']} —á–∞–Ω–∫–æ–≤ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ")
            
            if failed_uploads:
                st.error(f"‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {len(failed_uploads)} —Ñ–∞–π–ª–æ–≤")
                with st.expander("‚ö†Ô∏è –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫"):
                    for upload in failed_uploads:
                        st.write(f"**{upload['name']}**: {upload['error']}")
            
            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
            if successful_uploads:
                st.info("üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª 'Ask Test' –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º!")

def test_ingest():
    st.header("üì• –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    document_path = st.text_input(
        "–ü—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É:", 
        value="/Users/nepodymka/Desktop/LocalRAG/test_document.md"
    )
    
    if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"):
        if document_path:
            with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç..."):
                try:
                    data = {
                        "paths": [document_path],
                        "delete_missing": False
                    }
                    response = requests.post(
                        f"{API_BASE_URL}/ingest", 
                        json=data, 
                        timeout=60
                    )
                    
                    if response.status_code == 200:
                        result = response.json()
                        st.success("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!")
                        st.json(result)
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                        st.text(response.text)
                        
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            st.warning("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É")

def test_ask():
    st.header("‚ùì –¢–µ—Å—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    question = st.text_input(
        "–í–∞—à –≤–æ–ø—Ä–æ—Å:", 
        value="–ö–∞–∫–∏–µ –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω—ã –≤ –ø–æ–ª–∏—Ç–∏–∫–µ?"
    )
    
    if st.button("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"):
        if question:
            with st.spinner("–ò—â–µ–º –æ—Ç–≤–µ—Ç..."):
                try:
                    data = {"question": question}
                    response = requests.post(
                        f"{API_BASE_URL}/ask", 
                        json=data, 
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        result = response.json()
                        st.success("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!")
                        
                        st.subheader("–û—Ç–≤–µ—Ç:")
                        st.write(result.get("answer", "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"))
                        
                        if "citations" in result:
                            st.subheader("–ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
                            for cite in result["citations"]:
                                st.write(f"- {cite}")
                        
                        if "debug" in result:
                            with st.expander("Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
                                st.json(result["debug"])
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                        st.text(response.text)
                        
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            st.warning("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")

def test_document_management():
    st.header("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if "last_refresh" not in st.session_state:
        st.session_state.last_refresh = 0
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2, col3 = st.columns([2, 1, 1])
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"):
            st.session_state.last_refresh += 1
            st.rerun()
    
    with col2:
        auto_refresh = st.checkbox("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", help="–û–±–Ω–æ–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥")
    
    with col3:
        if st.button("üîç Debug API"):
            st.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º API –Ω–∞–ø—Ä—è–º—É—é...")
            debug_response = requests.get(f"{API_BASE_URL}/documents", timeout=10)
            st.json(debug_response.json() if debug_response.status_code == 200 else {"error": debug_response.status_code})
    
    if auto_refresh:
        time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        st.rerun()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        response = requests.get(f"{API_BASE_URL}/documents", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            st.subheader(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤", data["total_documents"])
            with col2:
                st.metric("–ß–∞–Ω–∫–æ–≤", data["total_chunks"])
            with col3:
                st.metric("–û–±–Ω–æ–≤–ª–µ–Ω–∏–π", st.session_state.last_refresh)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            st.caption(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {time.strftime('%H:%M:%S')}")
            
            if data["documents"]:
                st.subheader("üìù –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
                
                for doc in data["documents"]:
                    with st.expander(f"üìÑ {doc['filename']} ({doc['size']} –±–∞–π—Ç, {doc['chunks']} —á–∞–Ω–∫–æ–≤)"):
                        col1, col2 = st.columns([3, 1])
                        
                        with col1:
                            st.write(f"**–ü—É—Ç—å:** `{doc['path']}`")
                            st.write(f"**ID:** `{doc['doc_id_short']}`")
                            st.write(f"**–¢–∏–ø:** {doc['extension']}")
                            st.write(f"**–†–∞–∑–º–µ—Ä:** {doc['size']} –±–∞–π—Ç")
                            st.write(f"**–ß–∞–Ω–∫–æ–≤:** {doc['chunks']}")
                        
                        with col2:
                            if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{doc['doc_id']}"):
                                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                                if st.button(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ {doc['filename']}", key=f"confirm_{doc['doc_id']}"):
                                    with st.spinner("–£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç..."):
                                        try:
                                            delete_response = requests.delete(
                                                f"{API_BASE_URL}/documents/{doc['doc_id']}", 
                                                timeout=10
                                            )
                                            
                                            if delete_response.status_code == 200:
                                                result = delete_response.json()
                                                st.success(f"‚úÖ {result['message']}")
                                                st.write(f"–£–¥–∞–ª–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {result['deleted_chunks']}")
                                                st.rerun()
                                            else:
                                                st.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {delete_response.status_code}")
                                                
                                        except Exception as e:
                                            st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            else:
                st.info("üì≠ –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                st.write("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'Ingest Test' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                
        else:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {response.status_code}")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

def test_feedback():
    st.header("üìù –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        question = st.text_input("–í–æ–ø—Ä–æ—Å:", value="–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
        answer = st.text_area("–û—Ç–≤–µ—Ç:", value="–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
        rating = st.selectbox("–û—Ü–µ–Ω–∫–∞:", ["up", "down"])
    
    with col2:
        reason = st.selectbox("–ü—Ä–∏—á–∏–Ω–∞:", [
            "–ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç", "–Ω–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç", "–≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏—è", 
            "–Ω–µ –ø–æ —Ç–µ–º–µ", "—É—Å—Ç–∞—Ä–µ–≤—à–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        ])
        comment = st.text_area("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", value="–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    
    if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"):
        with st.spinner("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º..."):
            try:
                data = {
                    "question": question,
                    "llm_answer": answer,
                    "citations_used": ["test_chunk"],
                    "rating": rating,
                    "reason": reason,
                    "comment": comment,
                    "session_id": "test_session",
                    "request_id": "test_request"
                }
                response = requests.post(
                    f"{API_BASE_URL}/feedback", 
                    json=data, 
                    timeout=30
                )
                
                if response.status_code == 200:
                    result = response.json()
                    st.success("‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                    st.json(result)
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                    st.text(response.text)
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def run_full_test():
    st.header("üöÄ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç"):
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        tests = [
            ("Health Check", test_health_api),
            ("Document Ingest", test_ingest_api),
            ("Question Answering", test_ask_api),
            ("Feedback System", test_feedback_api)
        ]
        
        results = []
        
        for i, (test_name, test_func) in enumerate(tests):
            status_text.text(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {test_name}")
            progress_bar.progress((i + 1) / len(tests))
            
            try:
                result = test_func()
                results.append((test_name, "‚úÖ –£—Å–ø–µ—à–Ω–æ", result))
            except Exception as e:
                results.append((test_name, "‚ùå –û—à–∏–±–∫–∞", str(e)))
            
            time.sleep(1)
        
        status_text.text("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for test_name, status, result in results:
            st.write(f"**{test_name}**: {status}")
            if isinstance(result, dict):
                with st.expander(f"–î–µ—Ç–∞–ª–∏ {test_name}"):
                    st.json(result)

def test_health_api():
    response = requests.get(f"{API_BASE_URL}/health", timeout=10)
    return response.json() if response.status_code == 200 else None

def test_ingest_api():
    data = {
        "paths": ["/Users/nepodymka/Desktop/LocalRAG/test_document.md"],
        "delete_missing": False
    }
    response = requests.post(f"{API_BASE_URL}/ingest", json=data, timeout=60)
    return response.json() if response.status_code == 200 else None

def test_ask_api():
    data = {"question": "–ö–∞–∫–∏–µ –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω—ã –≤ –ø–æ–ª–∏—Ç–∏–∫–µ?"}
    response = requests.post(f"{API_BASE_URL}/ask", json=data, timeout=30)
    return response.json() if response.status_code == 200 else None

def test_feedback_api():
    data = {
        "question": "–¢–µ—Å—Ç",
        "llm_answer": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç",
        "citations_used": ["test"],
        "rating": "up",
        "reason": "–ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç",
        "comment": "–¢–µ—Å—Ç",
        "session_id": "test",
        "request_id": "test"
    }
    response = requests.post(f"{API_BASE_URL}/feedback", json=data, timeout=30)
    return response.json() if response.status_code == 200 else None

if __name__ == "__main__":
    main()